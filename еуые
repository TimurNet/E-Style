async function getAllTextStyles() {
  const localStyles = await figma.getLocalTextStylesAsync();
  const variables = await figma.variables.getLocalVariablesAsync();

  // Выводим данные о переменных
  console.log("Fetched variables:", variables);

  return localStyles.map(style => {
    console.log("Processing style:", style.name);

    const boundVariables = Object.entries(style.boundVariables || {}).reduce(
        (acc: { [key: string]: string }, [field, variableAlias]) => {
          const variable = variableAlias?.id ? variables.find(v => v.id === variableAlias.id) : null;

          if (variable) {
            acc[field] = variable.name;
          } else {
            console.warn(`Variable not found for style field: ${field}, ID: ${variableAlias?.id}`);
          }

          return acc;
        },
        {}
    );

    console.log("Bound variables for style:", boundVariables);

    return {
      ...style,
      boundVariables,
      allVariables: variables
    };
  });
}

// Функция для обработки сообщений из UI
figma.ui.onmessage = async (msg) => {
  if (msg.type === 'log-variables') {
    // Получаем локальные переменные
    const variables = await figma.variables.getLocalVariablesAsync();

    // Передаем переменные в UI
    figma.ui.postMessage({ type: 'log-variables', data: variables });

    // Для подтверждения успешной передачи
    figma.ui.postMessage({ type: 'logged-variables' });
  } else if (msg.type === 'close-plugin') {
    // Закрытие плагина
    figma.closePlugin();
  }
};


// Функция для группировки стилей по названию шрифта
async function getGroupedTextStyles() {
  const localStyles = await figma.getLocalTextStylesAsync();
  const variables = await figma.variables.getLocalVariablesAsync();

  // Группируем стили по названию шрифта
  const groupedStyles = localStyles.reduce((groups, style) => {
    const fontFamily = style.fontName?.family || 'Unknown Font';
    if (!groups[fontFamily]) {
      groups[fontFamily] = [];
    }

    const boundVariables = Object.entries(style.boundVariables || {}).reduce(
        (acc: { [key: string]: string }, [field, variableAlias]) => {
          const variable = variables.find(v => v.id === variableAlias?.id);
          if (variable) {
            acc[field] = variable.name;
          }
          return acc;
        },
        {}
    );

    groups[fontFamily].push({
      ...style,
      boundVariables,
      allVariables: variables
    });

    return groups;
  }, {} as { [key: string]: any[] });

  return groupedStyles;
}

// Функция для обновления привязки переменной для стиля
async function updateBoundVariable(styleId: string, field: VariableBindableTextField, variableId: string | null) {
  const textStyle = await figma.getStyleByIdAsync(styleId);
  if (textStyle && textStyle.type === 'TEXT') {
    const variable = variableId ? await figma.variables.getVariableByIdAsync(variableId) : null;
    if (variable) {
      await textStyle.setBoundVariable(field, variable);
    }
  }
}

figma.ui.onmessage = async (msg) => {
  if (msg.type === 'get-text-styles') {
    const textStyles = await getAllTextStyles();
    figma.ui.postMessage({ type: 'text-styles', data: textStyles });
  } else if (msg.type === 'get-grouped-text-styles') {
    const groupedTextStyles = await getGroupedTextStyles();
    figma.ui.postMessage({ type: 'grouped-text-styles', data: groupedTextStyles });
  } else if (msg.type === 'update-variable') {
    await updateBoundVariable(msg.styleId, msg.field, msg.variableId);
    figma.ui.postMessage({ type: 'variable-updated' });
  } else if (msg.type === 'apply-variable-to-font-group') {
    const { variableId, field, fontFamily } = msg;
    const groupedStyles = await getGroupedTextStyles();
    const stylesToUpdate = groupedStyles[fontFamily] || [];

    for (const style of stylesToUpdate) {
      await updateBoundVariable(style.id, field, variableId);
    }

    figma.ui.postMessage({ type: 'variable-applied-to-font-group' });
  } else if (msg.type === 'apply-variable-to-all-styles') {
    const { variableId, field } = msg;
    const textStyles = await figma.getLocalTextStylesAsync();
    for (const style of textStyles) {
      await updateBoundVariable(style.id, field, variableId);
    }
    figma.ui.postMessage({ type: 'variable-applied-to-all-styles' });
  } else if (msg.type === 'close-plugin') {
    figma.closePlugin();
  }
};

// Отображение UI
figma.showUI(__html__, { width: 600, height: 600 });






<!DOCTYPE html>
<html>
<head>
    <title>Grouped Text Styles</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
        }
        h1 {
            font-size: 18px;
            margin-bottom: 20px;
        }
        ul {
            list-style: none;
            padding: 0;
        }
        li {
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 10px;
        }
        select, button {
            margin-top: 10px;
            padding: 5px;
            width: 100%;
        }
        button {
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
<h1>Grouped Text Styles</h1>
<label for="font-family-select">Select Font Group:</label>
<select id="font-family-select">
    <option value="">Select a Font Group</option>
</select>

<label for="variable-select">Select Variable:</label>
<select id="variable-select">
    <option value="">Select a Variable</option>
</select>

<button id="apply-to-font-group">Apply Variable to Font Group</button>

<script>
    const fontFamilySelect = document.getElementById('font-family-select');
    const variableSelect = document.getElementById('variable-select');
    const applyButton = document.getElementById('apply-to-font-group');

    // Получение данных от плагина
    window.onmessage = (event) => {
        const { type, data } = event.data.pluginMessage;
        if (type === 'grouped-text-styles') {
            fontFamilySelect.innerHTML = '<option value="">Select a Font Group</option>';
            Object.keys(data).forEach(fontFamily => {
                fontFamilySelect.innerHTML += `<option value="${fontFamily}">${fontFamily}</option>`;
            });

            // Заполняем переменные, если есть данные
            const firstGroup = Object.values(data)[0];
            if (firstGroup && firstGroup[0]?.allVariables) {
                variableSelect.innerHTML = '<option value="">Select a Variable</option>';
                firstGroup[0].allVariables.forEach(variable => {
                    variableSelect.innerHTML += `<option value="${variable.id}">${variable.name}</option>`;
                });
            }
        }
    };

    // Применение переменной к группе
    applyButton.onclick = () => {
        const fontFamily = fontFamilySelect.value;
        const variableId = variableSelect.value;
        if (!fontFamily || !variableId) {
            alert('Please select a font group and a variable.');
            return;
        }

        parent.postMessage({
            pluginMessage: {
                type: 'apply-variable-to-font-group',
                fontFamily,
                variableId,
                field: 'fontFamily'
            }
        }, '*');
    };

    // Запрос данных
    parent.postMessage({ pluginMessage: { type: 'get-grouped-text-styles' } }, '*');



</script>
</body>
</html>
